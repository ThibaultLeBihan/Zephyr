// Generated by gencpp from file plymouth_internship_2019/KeyboardServoCommand.msg
// DO NOT EDIT!


#ifndef PLYMOUTH_INTERNSHIP_2019_MESSAGE_KEYBOARDSERVOCOMMAND_H
#define PLYMOUTH_INTERNSHIP_2019_MESSAGE_KEYBOARDSERVOCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plymouth_internship_2019
{
template <class ContainerAllocator>
struct KeyboardServoCommand_
{
  typedef KeyboardServoCommand_<ContainerAllocator> Type;

  KeyboardServoCommand_()
    : servo_command_1(0)
    , servo_command_2(0)  {
    }
  KeyboardServoCommand_(const ContainerAllocator& _alloc)
    : servo_command_1(0)
    , servo_command_2(0)  {
  (void)_alloc;
    }



   typedef int64_t _servo_command_1_type;
  _servo_command_1_type servo_command_1;

   typedef int64_t _servo_command_2_type;
  _servo_command_2_type servo_command_2;





  typedef boost::shared_ptr< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> const> ConstPtr;

}; // struct KeyboardServoCommand_

typedef ::plymouth_internship_2019::KeyboardServoCommand_<std::allocator<void> > KeyboardServoCommand;

typedef boost::shared_ptr< ::plymouth_internship_2019::KeyboardServoCommand > KeyboardServoCommandPtr;
typedef boost::shared_ptr< ::plymouth_internship_2019::KeyboardServoCommand const> KeyboardServoCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator1> & lhs, const ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator2> & rhs)
{
  return lhs.servo_command_1 == rhs.servo_command_1 &&
    lhs.servo_command_2 == rhs.servo_command_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator1> & lhs, const ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plymouth_internship_2019

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9dbce863de6b75635fc5625ec0af5414";
  }

  static const char* value(const ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9dbce863de6b7563ULL;
  static const uint64_t static_value2 = 0x5fc5625ec0af5414ULL;
};

template<class ContainerAllocator>
struct DataType< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plymouth_internship_2019/KeyboardServoCommand";
  }

  static const char* value(const ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 servo_command_1\n"
"int64 servo_command_2\n"
;
  }

  static const char* value(const ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_command_1);
      stream.next(m.servo_command_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyboardServoCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plymouth_internship_2019::KeyboardServoCommand_<ContainerAllocator>& v)
  {
    s << indent << "servo_command_1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.servo_command_1);
    s << indent << "servo_command_2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.servo_command_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLYMOUTH_INTERNSHIP_2019_MESSAGE_KEYBOARDSERVOCOMMAND_H
